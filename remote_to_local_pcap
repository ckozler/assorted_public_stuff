#!/usr/bin/env bash

# Run ./remote_to_local_pcap hostname1 hostname2 hostname3
# then run wireshark from command line
#
# wireshark -kni /path/script/outputs/hostname1.pcap -kni /path/script/outputs/hostname2.pcap"
#
#
#
#* using tmp /var/tmp/tmp.X8KAzeSbMq. Will purge if exists
# mkdir: created directory '/var/tmp/tmp.X8KAzeSbMq'
#* Running test tcpdump on host hostname1 to see if we can run
# -> OK: hostname1
#* mkfifo for hostname1 in /var/tmp/tmp.X8KAzeSbMq
#* Running and backgrounding packet capture to local machine
# ---> ssh+tcpdump will block until 'wireshark -kni /var/tmp/tmp.X8KAzeSbMq/hostname1.pcap' is ran <---
#-> Will wait for PID 32672
#* Running test tcpdump on host hostname2 to see if we can run
# -> OK: hostname2
#* mkfifo for hostname2 in /var/tmp/tmp.X8KAzeSbMq
#* Running and backgrounding packet capture to local machine
# ---> ssh+tcpdump will block until 'wireshark -kni /var/tmp/tmp.X8KAzeSbMq/hostname2.pcap' is ran <---
#-> Will wait for PID 32683
#* itearating known PID's for children for cleanup
#* pids: 18800 32653 32672 32674 32683 32685 32686 32687 32688 32689 32691 32694 32695 32696 32697 32698
# - Sleeping to let settle -
#1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
# - Starting wait: 18800 32653 32672 32674 32683 32685 32686 32687 32688 32689 32691 32694 32695 32696 32697 32698 -


#set -x

trap ctrl_c INT
trap ctrl_c EXIT

declare -a pids=()

tmpdir=$(mktemp -u -d -p /var/tmp/)
echo "* using tmp ${tmpdir}. Will purge if exists"
if [ -d ${tmpdir} ]; then rm -rfv ${tmpdir}; fi
mkdir -pv ${tmpdir}

# Clean up 
function ctrl_c() {
        set +x
        echo "* * * ctrl+c caught. Killing pids * * * "
        for i in $(echo ${pids[@]}); do
                echo "-> Cleaning up pid $i"
                kill $i &> /dev/null
        done

        echo "* * * ctrl+c caught. Cleaning temp directory * * *"
        rm -rfv ${tmpdir} &> /dev/null
}


list="$*"
cmdtest="timeout 5 ssh sysadmin@THE_HOST \"sudo /sbin/tcpdump -i any -w /dev/null -c 5\" &> /dev/null"
cmdbase="ssh sysadmin@THE_HOST \"sudo /sbin/tcpdump -lnn -vvv -X -s 0 -w - -U -i any not port 22\" > ${tmpdir}/THE_HOST.pcap"
for i in $(echo "${list}"); do
        cmdtest=$(echo "${cmdtest}" | sed "s,THE_HOST,$i,g")
        cmd=$(echo "${cmdbase}" | sed "s,THE_HOST,$i,g")
        echo "* Running test tcpdump on host $i to see if we can run"
        eval ${cmdtest}
        if [ ${?} -ne 0 ]; then echo "! ERROR: Failed to run test against $i. Will not run for this host" && continue; fi
        echo " -> OK: $i"
        echo "* mkfifo for $i in ${tmpdir}"
        mkfifo ${tmpdir}/$i.pcap
        if [ $? -ne 0 ]; then echo "! ERROR: mkfifo for $i failed. Skipping" && continue; fi
        echo "* Running and backgrounding packet capture to local machine"
        echo " ---> ssh+tcpdump will block until 'wireshark -kni ${tmpdir}/$i.pcap' is ran <---"
        eval ${cmd} &
        pid=$!
        pids+=( "$pid" )
        echo "-> Will wait for PID $pid"
done

echo "* itearating known PID's for children for cleanup"
declare -a tmppids=${pids[@]}
for i in $(echo "${tmppids[@]}"); do
        curpids=$(ps --forest -o pid,tty,stat,time,cmd -g $(ps -o sid= -p $i) | awk '{ print $1 }' | grep '^[0-9]' | xargs)
        for j in $(echo "${curpids}"); do
                pids+=( "$j" )
        done
done

uniq_pids=($(printf "%s\n" "${pids[@]}" | sort -u))
echo "* pids: ${uniq_pids[@]}"
echo " - Sleeping to let settle -"
for i in $(seq 1 15); do echo -n "$i "; sleep 1; done
unset pids
declare -a pids=(${uniq_pids[@]})
echo "- Starting wait: ${pids[@]} -"
wait ${pids[@]} &> /dev/null
